buildscript {

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }

}


allprojects {

    group = 'org.example.tests-cucumber'
    version = new File("${rootDir}/VERSION.txt").text.trim()

    apply plugin: 'idea'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext.versions = [
        dropwizard        : '0.9.1',
        orika             : '1.4.6',
        morphia           : '1.0.1',
        slf4j             : '1.7.13',
        assertj           : '3.2.0',
        spring            : '4.2.4.RELEASE',
        jackson           : '2.6.4',
        guava             : '19.0',
        hibernateValidator: '5.2.2.Final',
    ]

    // Maven plugin

    project.afterEvaluate {

        project.apply plugin: 'maven'

    }

    // Plugins to use with the java plugin

    project.afterEvaluate {

        if (project.pluginManager.hasPlugin("java")) {

            // Versions plugin

            project.apply plugin: 'com.github.ben-manes.versions'

            // Checkstyle plugin

            project.apply plugin: 'checkstyle'

            project.checkstyle {
                ignoreFailures = true
                configFile = project.rootProject.file("config/checkstyle/checkstyle.xml")
            }

            tasks.withType(Checkstyle) {
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            // PMD plugin

            project.apply plugin: 'pmd'

            project.pmd {
                ignoreFailures = true
            }

            tasks.withType(Pmd) {
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

            // Findbugs plugin

            project.apply plugin: 'findbugs'

            project.findbugs {
                effort = "max"

                ignoreFailures = true

            }

            tasks.withType(FindBugs) {
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }

        }

        // Replace commons logging by slf4j, if present
        project.configurations.all {

            resolutionStrategy.dependencySubstitution {
                substitute module('commons-logging:commons-logging') with module("org.slf4j:jcl-over-slf4j:${project.versions.slf4j}")
            }

        }

        // Shared Java compiler config
        project.tasks.withType(JavaCompile) {

            project.sourceCompatibility = '1.8'

            options.encoding = "UTF-8"
            options.deprecation = true
            options.compilerArgs << "-parameters"

        }

    }

}


project("${rootProject.name}-api") {

    apply plugin: 'java'

    dependencies {

        // Required for validation annotations
        compile "org.hibernate:hibernate-validator:${versions.hibernateValidator}"

        // Required for Jackson JSON annotations
        compile "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"

        // Required for Morphia annotations
        compile "org.mongodb.morphia:morphia:${versions.morphia}"

        compile "com.google.guava:guava:${versions.guava}"

    }

}


project("${rootProject.name}-backend") {

    apply plugin: 'java'

    dependencies {

        compile project(":${rootProject.name}-api")

        compile "io.dropwizard:dropwizard-core:${versions.dropwizard}"
        compile "io.dropwizard:dropwizard-client:${versions.dropwizard}"
        compile "io.dropwizard:dropwizard-metrics-graphite:${versions.dropwizard}"
        compile "ma.glasnost.orika:orika-core:${versions.orika}"
        compile "org.mongodb.morphia:morphia:${versions.morphia}"
        compile "org.slf4j:slf4j-api:${versions.slf4j}"
        compile "org.springframework:spring-context:${versions.spring}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions.jackson}"

        testCompile "org.assertj:assertj-core:${versions.assertj}"

    }

    task runBackend(type: JavaExec, description: 'Run backend server') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'example.reporting.application.BackendApplication'

        args += ['serve', "${projectDir}/backend-config.yml"]
    }


}


project("${rootProject.name}-import") {

    apply plugin: 'java'

    dependencies {

        compile project(":${rootProject.name}-api")

        compile "io.dropwizard:dropwizard-core:${versions.dropwizard}"
        compile "io.dropwizard:dropwizard-client:${versions.dropwizard}"
        compile "org.slf4j:slf4j-api:${versions.slf4j}"

    }

}


project("${rootProject.name}-ui") {

    apply plugin: 'base'

    task gruntClean(type: Exec) {
        description = 'Grunt clean'

        commandLine 'grunt', 'clean'
    }

    tasks.clean.dependsOn(gruntClean)

    task dist(type: Exec) {
        description = 'Build dist'

        commandLine 'grunt'

        inputs.dir('app')
        inputs.dir('test')
        inputs.file('Gruntfile.js')

        outputs.dir('dist')
    }

    task test(type: Exec) {
        description = 'Test'

        commandLine 'grunt', 'test'

        inputs.file dist
    }

    tasks.check.dependsOn(test)

    task distZip(type: Zip) {
        description = 'Assemble'

        inputs.file dist
        outputs.file(archivePath)

        from dist
        into 'ui'
    }

    tasks.assemble.dependsOn(distZip)

    configurations {
        archives
    }

    artifacts {
        archives distZip
    }

    task install(type: Upload) {
        configuration = configurations.archives
    }

}


project("${rootProject.name}-example-features") {

    apply plugin: 'groovy'

    dependencies {

        compile 'org.codehaus.groovy:groovy-all:2.4.5'
        compile 'info.cukes:cucumber-groovy:1.2.4'
        compile "org.slf4j:slf4j-api:${versions.slf4j}"
        compile "org.assertj:assertj-core:${versions.assertj}"

    }

    task runCucumber(type: JavaExec, description: 'Run Cucumber features') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'cucumber.api.cli.Main'

        args += [
            '--glue', 'classpath:example',
            '--plugin', 'pretty',
            '--plugin', 'html:build/cucumber/html',
            '--plugin', 'json:build/cucumber/report.json',
            '--tags', '~@ignored',
            'src/features',
        ]
    }

    task dryRunCucumber(type: JavaExec, description: 'Dry run Cucumber features') {

        classpath = sourceSets.main.runtimeClasspath

        main = 'cucumber.api.cli.Main'

        args += [
            '--glue', 'classpath:example',
            '--plugin', 'pretty',
            '--plugin', 'html:build/cucumber-dry/html',
            '--plugin', 'json:build/cucumber-dry/report.json',
            '--dry-run',
            'src/features',
        ]
    }

}
